using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

[ RequireComponent ( typeof ( SphereCollider ), typeof ( NavMeshAgent ), typeof ( Animator ) ) ]
public class NPC : CELL_ENTITY
{

	#region --------------------	Public Properties

	/// <summary>
	/// Gets the navmesh agent.
	/// </summary>
	/// <value>The agent.</value>
	public NavMeshAgent agent { get { return _agent; } }

	/// <summary>
	/// Gets the rounded cell position.
	/// </summary>
	/// <value>The position.</value>
	public Vector3 position 
	{ 
		get {
			return new Vector3 ( Mathf.Round ( transform.position.x / 100.0f ),
				Mathf.Round ( transform.position.y / 100.0f ),
				Mathf.Round ( transform.position.z / 100.0f ) );
		} 
	}

	#endregion

	#region --------------------	Public Fields

	[ Space ]
	[ Header ( "NPC Configurations" ) ]

	[ Tooltip ( "The minimum amount of time (in seconds) the NPC will Idle at a point of interest." ) ]
	/// <summary>
	/// The minimum idle time.
	/// </summary>
	public float minimumIdleTime = 10.0f;

	[ Tooltip ( "The maximum amount of time (in seconds) the NPC will Idle at a point of interest." ) ]
	/// <summary>
	/// The maximum idle time.
	/// </summary>
	public float maximumIdleTime = 20.0f;

	[ Tooltip ( "Can the NPC interact with objects." ) ]
	/// <summary>
	/// Can the npc interact with objects.
	/// </summary>
	public bool canInteractWithObjects = false;

	#endregion

	#region --------------------	Public Methods

	/// <summary>
	/// Changes the point of interest.
	/// </summary>
	/// <param name="_newPointOfInterest">New point of interest.</param>
	public void Change_Point_Of_Interest ( CELL_ENTITY _newPointOfInterest = null )
	{
		//	If the point of interest is not passed in
		if ( _newPointOfInterest == null ) 
		{
			_newPointOfInterest = ( name.Equals ( "JOE" ) )? CELL.allCells [ Random.Range ( 0, CELL.allCells.Count ) ].randomPointOfInterest : parentCell.randomPointOfInterest ;
		}

		//	Set isIdling to false
		_isIdling = false;

		if ( _targetPointOfInterest != null )
		{
			//	Remove the npc from the target point of interest's audience
			_targetPointOfInterest.audience.Remove ( this );
		}

		//	Set the new point of interest
		_targetPointOfInterest = _newPointOfInterest;

		//	**************************
		//	Animate!
		//	**************************

		//	Set the navmesh agent destination & set has registered to false
		if ( _targetPointOfInterest != null ) // && _agent.isOnNavMesh == true)  //would this help?
		{
			_agent.SetDestination ( _targetPointOfInterest.transform.position );

			//	Set the idle bool to true
			if ( _anim.runtimeAnimatorController != null )
			{
				_anim.SetFloat ( "Walking_Speed", 1f );
			}
		}
		_hasRegisteredWithPointOfInterest = false;
	}
		
	/// <summary>
	/// Translate the NPC.
	/// </summary>
	public IEnumerator Translate ()
	{
		//	Stop Idling
		StopCoroutine ( "Idle" );

		//	Disable emulated position of navmesh
		_agent.updatePosition = false;

		//	Wait until translation complete
		yield return new WaitUntil ( () => parentCell.hasCompletedTranslation == true );

		//	Warp to new position
		_agent.Warp ( transform.position );

		//	Enable emulated position
		_agent.updatePosition = true;

		//	Wait an arbitrary amount of time
		yield return new WaitForSeconds ( 1.0f );

		//	Change Point of Interest
		if ( _targetPointOfInterest != null )
		{
			Change_Point_Of_Interest ( ( _targetPointOfInterest.isActiveAndEnabled ) ? _targetPointOfInterest : null );
		}
		else
		{
			Change_Point_Of_Interest ();
		}
	}

	/// <summary>
	/// Changes the parent.
	/// </summary>
	public void Change_Parent ()
	{
		parentCell.On_Cell_Translate -= delegate { StartCoroutine ( Translate () ); };
		Recollect_Parent_Information ();
		parentCell.On_Cell_Translate += delegate { StartCoroutine ( Translate () ); };
	}

	#endregion

	#region --------------------	Private Fields

	/// <summary>
	/// The animation.
	/// </summary>
	private Animator _anim;

	/// <summary>
	/// The target point of interest.
	/// </summary>
	private CELL_ENTITY _targetPointOfInterest;

	/// <summary>
	/// Has the NPC registered with current point of interest.
	/// </summary>
	private bool _hasRegisteredWithPointOfInterest = false;

	/// <summary>
	/// The navmesh agent.
	/// </summary>
	private NavMeshAgent _agent;

	/// <summary>
	/// Is it the first update.
	/// </summary>
	private bool _isFirstUpdate = true;

	/// <summary>
	/// Is the NPC idling.
	/// </summary>
	private bool _isIdling = false;

	#endregion

	#region --------------------	Private Methods

	/// <summary>
	/// Awake this instance.
	/// </summary>
	private void Awake ()
	{
		_agent = GetComponent <NavMeshAgent> ();

		_anim = GetComponent <Animator> ();
	}

	/// <summary>
	/// Update this instance.
	/// </summary>
	private void Update ()
	{
		if ( _isFirstUpdate )
		{
			//	Register with cell translation
			parentCell.On_Cell_Translate += delegate { StartCoroutine ( Translate () ); };

			//	Start an Idle
			StartCoroutine ( Idle () );

			_isFirstUpdate = false;
		}
		if ( _isIdling )
		{
			if ( _targetPointOfInterest != null )
			{
				//	**************************
				//	Animate!
				//	**************************

				Vector3 _lookPos = Vector3.Slerp ( transform.position + transform.forward, 
					                   new Vector3 ( _targetPointOfInterest.focalPoint.x, transform.position.y, _targetPointOfInterest.focalPoint.z ), Time.deltaTime );
				_agent.transform.LookAt ( _lookPos );
			}
		}
	}

	/// <summary>
	/// Raises the trigger stay event.
	/// </summary>
	/// <param name="_c">C.</param>
	private void OnTriggerStay ( Collider _c )
	{
		//	If the NPC is within a point of interest
		if ( _c.CompareTag ( "Point_Of_Interest" ) && !_hasRegisteredWithPointOfInterest )
		{
			//	Get the attached entity script
			CELL_ENTITY _entity = _c.GetComponent <CELL_ENTITY> ();

			//	If it is the target point of interest
			if ( _targetPointOfInterest != null && _entity == _targetPointOfInterest )
			{
				//	Reset the agent destination for a more spread-out collection of NPCs
				float _newX = ( Random.Range ( 0, 2 ) > 0 )? Random.Range ( 2.0f, 3.0f ) : Random.Range ( -3.0f, -2.0f );
				float _newZ = ( Random.Range ( 0, 2 ) > 0 )? Random.Range ( 2.0f, 3.0f ) : Random.Range ( -3.0f, -2.0f );
				_agent.SetDestination ( _targetPointOfInterest.transform.position + new Vector3 ( _newX , 0, _newZ ) );

				//	Specify that the npc has registered
				_hasRegisteredWithPointOfInterest = true;

				//	Start Idling
				StartCoroutine ( Idle () );
			}
		}
	}

	/// <summary>
	/// Idle this instance.
	/// </summary>
	private IEnumerator Idle ()
	{
		//	If the npc has a target desitination
		if ( _targetPointOfInterest != null )
		{
			yield return new WaitUntil ( () => _agent.velocity.magnitude < 0.3f);

			//	If the NPC is trying to move by others or is walking slowly, have them stop instead
			_agent.SetDestination ( transform.position );

			//	Add the npc to the point of interest's audience
			_targetPointOfInterest.audience.Add ( this );

			//	Set idling to true to force look at focal point
			_isIdling = true;

			//	Set the idle bool to true
			if ( _anim.runtimeAnimatorController != null )
			{
				_anim.SetFloat ( "Walking_Speed", 0f );
			}
		}

		//	Wait for a random amount of time within bounds.  Then, change the target point of interest
		yield return new WaitForSeconds ( Random.Range ( (_isFirstUpdate)? 0.0f : minimumIdleTime, (_isFirstUpdate)? 1.0f : maximumIdleTime ) );
		if ( parentCell.pointsOfInterest.Count > 0 )
		{
			Change_Point_Of_Interest ();
		}
		else
		{
			Idle ();
		}
	}

	#endregion

}