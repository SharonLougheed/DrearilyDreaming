using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[ DisallowMultipleComponent ]
public class CELL : MonoBehaviour 
{

	#region --------------------	Public Events

	/// <summary>
	/// Cell events:
	/// On Cell Generate is called whenever the cell is told to generate.
	/// </summary>
	public delegate void CELL_EVENT ();
	public event CELL_EVENT On_Cell_Generate;

	#endregion

	#region --------------------	Public Properties

	/// <summary>
	/// Gets the rounded cell position.
	/// </summary>
	/// <value>The position.</value>
	public Vector3 position { 
		get {
			return new Vector3 ( Mathf.Round ( transform.position.x / 100.0f ),
				Mathf.Round ( transform.position.y / 100.0f ),
				Mathf.Round ( transform.position.z / 100.0f ) );
		} 
	}

	#endregion

	#region --------------------	Public Fields

	#endregion

	#region --------------------	Public Methods

	#endregion

	#region --------------------	Private Properties

	/// <summary>
	/// Gets the player postion.
	/// </summary>
	/// <value>The player postion.</value>
	private Vector3 playerPostion
	{
		get {
			return new Vector3 ( Mathf.Round ( _player.position.x / 100.0f ),
				Mathf.Round ( _player.position.y / 100.0f ),
				Mathf.Round ( _player.position.z / 100.0f ) );
		} 
	}

	#endregion

	#region --------------------	Private Fields

	/// <summary>
	/// The player.
	/// </summary>
	private static Transform _player;

	#endregion

	#region --------------------	Private Methods

	/// <summary>
	/// Start this instance.
	/// </summary>
	private void Start ()
	{
		_player = ( _player == null )? GameObject.FindGameObjectWithTag ( "Player" ).transform : _player;
	}

	/// <summary>
	/// Called at the end of the execution order.
	/// </summary>
	private void LateUpdate ()
	{
		if ( ( playerPostion - position ).magnitude >= 2 )
		{
			Translate ( ( playerPostion - position ).normalized );
		}
	}

	/// <summary>
	/// Translate the cell in the specified _direction.
	/// </summary>
	/// <param name="_direction">Direction.</param>
	private void Translate ( Vector3 _direction )
	{
		//	Move the cell & its children to a new position based on the direction.
		transform.position += new Vector3 (
			( Mathf.Abs ( _direction.x ) > 0.5f )? Mathf.Round ( _direction.x ) * 300.0f : 0f,
			0f,
			( Mathf.Abs ( _direction.z ) > 0.5f )? Mathf.Round ( _direction.z ) * 300.0f : 0f
		);

		//	Regenerate the cell with a newly randomized configuration
		Generate ();
	}

	/// <summary>
	/// Generate this instance.
	/// </summary>
	private void Generate ()
	{
		if ( On_Cell_Generate != null )
		{
			On_Cell_Generate ();
		}
	}

	#endregion

}